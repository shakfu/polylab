#autogenerated by sqlautocode

from sqlalchemy import *
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relation, backref, sessionmaker

engine = create_engine('sqlite:///:memory:', echo=True)
#~ engine = create_engine('mysql://root@localhost/test', echo=True)
Base = declarative_base()
metadata = Base.metadata
metadata.bind = engine

def get_session():
    Session = sessionmaker(bind=engine)
    session = Session()
    return session



class Company(Base):
    __tablename__ = 'company'

    #column definitions
    id = Column(Integer, primary_key=True)
    name = Column(String(20))

    def __init__(self, name):
        self.name = name
    
    def __repr__(self):
        return "<%s('%s')>" % (self.__class__.__name__,
                                                self.name)

class Employee(Base):
    __tablename__ = 'employee'

    #column definitions
    id = Column(Integer, primary_key=True)
    name = Column(String(20))
    company_id = Column(Integer, ForeignKey('company.id'))
    
    #relation definitions
    company = relation(Company, backref=backref('employees', order_by=id))
    
    def __init__(self, name):
        self.name = name
    
    def __repr__(self):
        return "<%s('%s')>" % (self.__class__.__name__,
                                                self.name)




def test():
    session = get_session()
    metadata.create_all(engine)
    
    IBM = Company('IBM')
    IBM.employees = [Employee('andy')]
    
    session.add(IBM)
    print IBM
    session.commit()
    p = session.query(Employee).filter_by(name='andy').first()
    

if __name__ == '__main__':
    test()
